import telebot
from telebot import types
import sqlite3
from datetime import datetime, timedelta
import random
import time
import smtplib
from email.message import EmailMessage

API_TOKEN = '8405903813:AAEcF7nEldg6QewRtaKKwrFVjIe6ZoUt9kg'
bot = telebot.TeleBot(API_TOKEN)

# --- DATABASE ---
db = sqlite3.connect('znoz_users.db', check_same_thread=False)
cursor = db.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    sub_until TEXT,
    used_promo_types TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS promo (
    code TEXT PRIMARY KEY,
    promo_type TEXT,
    expires_at TEXT,
    activations INTEGER,
    duration_days INTEGER
)
''')

PROMO_CODES = {
    "XakePromo":     ("permanent", None, 1, 9999),
    "TheBelieve":    ("weekly", None, 500, 7),
    "SummerZn0z":    ("summer", "2025-08-31", 1000, 9999),
    "–ë–ê–ë–´–ù–î–´–ë–£–ë–£–ó":  ("permanent", None, 1, 9999),
    "x1wy":          ("permanent", None, 1, 9999),
    "requiem":       ("permanent", None, 30, 9999),
    "newgen":        ("daily", None, 100, 1),
    "hello":         ("daily", None, 999999, 1)
}

for i in range(1, 51):
    code = f"forever{i:02}"
    PROMO_CODES[code] = ("permanent", None, 1, 9999)

for code, (ptype, expires, activations, days) in PROMO_CODES.items():
    cursor.execute("INSERT OR IGNORE INTO promo VALUES (?, ?, ?, ?, ?)", (code, ptype, expires, activations, days))
db.commit()

main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.row("–ñ–∞–ª–æ–±–∞", "–ü—Ä–æ–º–æ")
main_kb.row("–ü–æ–¥–ø–∏—Å–∫–∞", "–ó–∞–¥–∞–Ω–∏—è")

TO_EMAILS = ["support@telegram.org", "abuse@telegram.org", "dmca@telegram.org"]
SUBJECTS = [
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π Telegram",
    "–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"
]
BODIES = [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞. –ü—Ä–æ—à—É –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã.",
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü—Ä–æ—à—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.",
    "–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {target} –≤–µ–¥—ë—Ç —Å–µ–±—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å."
]

ACCOUNTS = [
    {"email": "abdusamat414@gmail.com", "password": "29082010ZNOZ"},
    {"email": "abdusamat424@gmail.com", "password": "29082010ZNOZ"},
    {"email": "adadazx55@gmail.com", "password": "29082010SNOS"}
]

complaints = {}

def send_email(from_email, password, to_email, subject, body):
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['To'] = to_email
    msg.set_content(body)
    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
        smtp.login(from_email, password)
        smtp.send_message(msg)

def mass_complaint(target):
    for account in ACCOUNTS:
        email = account['email']
        password = account['password']
        to = random.choice(TO_EMAILS)
        subject = random.choice(SUBJECTS)
        body = random.choice(BODIES).format(target=target)
        time.sleep(random.randint(5, 10))
        try:
            send_email(email, password, to, subject, body)
        except:
            pass

@bot.message_handler(commands=['start'])
def start_msg(msg):
    bot.send_message(msg.chat.id, "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Znoz –±–æ—Ç.", reply_markup=main_kb)

@bot.message_handler(func=lambda msg: msg.text == "–ñ–∞–ª–æ–±–∞")
def complaint_step1(msg):
    with db:
        row = db.execute("SELECT sub_until FROM users WHERE user_id = ?", (msg.from_user.id,)).fetchone()
    if row and datetime.fromisoformat(row[0]) >= datetime.now():
        complaints[msg.from_user.id] = {"step": 1}
        bot.send_message(msg.chat.id, "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    else:
        bot.send_message(msg.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

@bot.message_handler(func=lambda msg: complaints.get(msg.from_user.id, {}).get("step") == 1)
def complaint_step2(msg):
    complaints[msg.from_user.id]["username"] = msg.text.strip()
    complaints[msg.from_user.id]["step"] = 2
    bot.send_message(msg.chat.id, "üîé –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")

@bot.message_handler(func=lambda msg: complaints.get(msg.from_user.id, {}).get("step") == 2)
def complaint_send(msg):
    target = complaints[msg.from_user.id]["username"]
    del complaints[msg.from_user.id]
    bot.send_message(msg.chat.id, "üöÄ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
    mass_complaint(target)
    bot.send_message(msg.chat.id, "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Telegram Support.")

@bot.message_handler(func=lambda msg: msg.text == "–ü–æ–¥–ø–∏—Å–∫–∞")
def subscription(msg):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("1 –¥–µ–Ω—å - 50‚ÇΩ", callback_data="sub_1"))
    kb.add(types.InlineKeyboardButton("7 –¥–Ω–µ–π - 150‚ÇΩ", callback_data="sub_7"))
    kb.add(types.InlineKeyboardButton("30 –¥–Ω–µ–π - 300‚ÇΩ", callback_data="sub_30"))
    kb.add(types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ - 500‚ÇΩ", callback_data="sub_perm"))
    bot.send_message(msg.chat.id, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_"))
def handle_sub_choice(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "üíµ –û–ø–ª–∞—Ç–∞: @xakepzn0z –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")

@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–¥–∞–Ω–∏—è")
def tasks(msg):
    bot.send_message(msg.chat.id, "üìå –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!")

@bot.message_handler(func=lambda msg: msg.text == "–ü—Ä–æ–º–æ")
def promo_code_handler(msg):
    bot.send_message(msg.chat.id, "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(msg, apply_promo)

def apply_promo(msg):
    code = msg.text.strip()
    with db:
        promo = db.execute("SELECT * FROM promo WHERE code = ?", (code,)).fetchone()
    if not promo:
        bot.send_message(msg.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    promo_type, expires_at, activations, duration_days = promo[1:]
    if expires_at and datetime.fromisoformat(expires_at) < datetime.now():
        bot.send_message(msg.chat.id, "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
        return

    with db:
        row = db.execute("SELECT used_promo_types FROM users WHERE user_id = ?", (msg.from_user.id,)).fetchone()
    used_types = row[0].split(',') if row and row[0] else []
    if promo_type in used_types:
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.")
        return

    with db:
        row = db.execute("SELECT sub_until FROM users WHERE user_id = ?", (msg.from_user.id,)).fetchone()
    now = datetime.now()
    sub_until = datetime.fromisoformat(row[0]) if row and row[0] else now
    new_sub_until = max(sub_until, now) + timedelta(days=duration_days)

    with db:
        if not row:
            db.execute("INSERT INTO users (user_id, sub_until, used_promo_types) VALUES (?, ?, ?)",
                       (msg.from_user.id, new_sub_until.isoformat(), promo_type))
        else:
            used_types.append(promo_type)
            db.execute("UPDATE users SET sub_until = ?, used_promo_types = ? WHERE user_id = ?",
                       (new_sub_until.isoformat(), ','.join(used_types), msg.from_user.id))
        db.execute("UPDATE promo SET activations = activations - 1 WHERE code = ?", (code,))
    bot.send_message(msg.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {new_sub_until.date()}.")

# --- INFINITE LOOP TO KEEP ALIVE IN PYDROID ---
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
bot.infinity_polling()
